Terms
=====
	Classes			=> .
	Package			=> Container of Classes
	Modules			=> Container of Packages (A group of closely related packages and resources along with a new module descriptor file.)
	Dependencies	=> A Java code might contain references to other Java projects(external or internal)
	 

Why Modularity?
===============
Before understanding modularity we need to understand Why modularity is it really needed?
What is the PROBLEM with current system?


Problem
========
What the HELL
Classpath Hell ~ Dependency Hell ~ JAR Hell

* A  JAR cannot express which other JARs it depends on in a way that the JVM will understand.
* Developers would have to do this manually by reading the documentation, finding the correct projects, 
  downloading the JARs and adding them to the project's classpath.
  

Shadowing
Sometimes different JARs on the classpath contain classes with the same fully-qualified name.
This can happen for different reasons, 
	e.g.	when there are two different versions of the same library, 
			when a fat JAR contains dependencies that are also pulled in as standalone JARs, 
			when a library is renamed and unknowingly added to the classpath twice.


https://dzone.com/articles/what-is-jar-hell
https://blog.codefx.org/java/jar-hell/
https://blog.codefx.org/java/dev/will-there-be-module-hell/



Keywords
========
	export		=> Used inside module-info.java to export packages inside modules
	require		=> Used inside module-info.java to use packages of other modules


Golden Rule >>>>> "Export a Package but Require a Module"


List of Dependencies
====================
* Transitive Dependencies
* Qualified Dependencies
* Service Dependencies
* Optional Dependencies
* Runtime Dependencies




Transitive Dependencies
=======================
* If A requires B
	 C requires B
	 C get A
	   
A Transfer of dependencies to dependent modules


Qualified Exports
=================
* Qualified exports reverse the dependency flaw.
* Exporting module should not know which modules are depending upon them, A Qualified export breaks this Rule.


Service Dependencies
====================
* Service loader does not replace dependency injection framework.
* Ideal for standalone java SE applications

Optional Dependencies
=====================